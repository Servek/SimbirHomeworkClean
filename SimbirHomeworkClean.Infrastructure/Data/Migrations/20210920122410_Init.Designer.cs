// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SimbirHomeworkClean.Infrastructure.Data;

namespace SimbirHomeworkClean.Infrastructure.Data.Migrations
{
    [DbContext(typeof(MainDbContext))]
    [Migration("20210920122410_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.Property<int>("BooksId")
                        .HasColumnType("int")
                        .HasColumnName("books_id");

                    b.Property<int>("GenresId")
                        .HasColumnType("int")
                        .HasColumnName("genres_id");

                    b.HasKey("BooksId", "GenresId")
                        .HasName("pk_book_genre");

                    b.HasIndex("GenresId")
                        .HasDatabaseName("ix_book_genre_genres_id");

                    b.ToTable("book_genre");
                });

            modelBuilder.Entity("SimbirHomeworkClean.Domain.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("middle_name");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_author");

                    b.HasIndex("FirstName", "LastName", "MiddleName")
                        .IsUnique()
                        .HasDatabaseName("ix_author_first_name_last_name_middle_name")
                        .HasFilter("[middle_name] IS NOT NULL");

                    b.ToTable("author");
                });

            modelBuilder.Entity("SimbirHomeworkClean.Domain.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("author_id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("updated");

                    b.Property<int>("WritingYear")
                        .HasColumnType("int")
                        .HasColumnName("writing_year");

                    b.HasKey("Id")
                        .HasName("pk_book");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_book_author_id");

                    b.ToTable("book");
                });

            modelBuilder.Entity("SimbirHomeworkClean.Domain.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created");

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("genre_name");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_genre");

                    b.HasIndex("GenreName")
                        .IsUnique()
                        .HasDatabaseName("ix_genre_genre_name");

                    b.ToTable("genre");
                });

            modelBuilder.Entity("SimbirHomeworkClean.Domain.Entities.LibraryCard", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("person_id");

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("book_id");

                    b.Property<DateTimeOffset>("ObtainedDateTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("obtained_date_time");

                    b.HasKey("PersonId", "BookId")
                        .HasName("pk_library_card");

                    b.HasIndex("BookId")
                        .HasDatabaseName("ix_library_card_book_id");

                    b.ToTable("library_card");
                });

            modelBuilder.Entity("SimbirHomeworkClean.Domain.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("birth_date");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("middle_name");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_person");

                    b.ToTable("person");
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.HasOne("SimbirHomeworkClean.Domain.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .HasConstraintName("fk_book_genre_book_books_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimbirHomeworkClean.Domain.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .HasConstraintName("fk_book_genre_genre_genres_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SimbirHomeworkClean.Domain.Entities.Book", b =>
                {
                    b.HasOne("SimbirHomeworkClean.Domain.Entities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("fk_book_author_author_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("SimbirHomeworkClean.Domain.Entities.LibraryCard", b =>
                {
                    b.HasOne("SimbirHomeworkClean.Domain.Entities.Book", "Book")
                        .WithMany("LibraryCards")
                        .HasForeignKey("BookId")
                        .HasConstraintName("fk_library_card_book_book_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimbirHomeworkClean.Domain.Entities.Person", "Person")
                        .WithMany("LibraryCards")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("fk_library_card_person_person_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("SimbirHomeworkClean.Domain.Entities.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("SimbirHomeworkClean.Domain.Entities.Book", b =>
                {
                    b.Navigation("LibraryCards");
                });

            modelBuilder.Entity("SimbirHomeworkClean.Domain.Entities.Person", b =>
                {
                    b.Navigation("LibraryCards");
                });
#pragma warning restore 612, 618
        }
    }
}
